# Getting Real with an API

Now it's time to get real with an API. Do you know [Hacker News](https://news.ycombinator.com/)? It's a great news aggregator. You will use the Hacker News API to fetch trending stories from the platform. There is a [basic](https://github.com/HackerNews/API) and [search](https://hn.algolia.com/api) API. The latter one makes sense in your case to search stories on Hacker News. You could visit the [API specification](https://hn.algolia.com/api) to get a glimpse of the data structure.

## Lifecycle Methods

But the basics come first. You will need the knowledge about React lifecycle methods before you can start. These methods are a hook into the lifecycle of a React component which you can overwrite. There are only a few to learn.

You already know two lifecycle methods in your ES6 class component: constructor and render.

The constructor is only called when an instance of the component is created and inserted in the DOM. That process is called mounting of the component.

The render method is called during the mount process too, but also when the component updates. Each time when props or state of a component change the render method is called.

Now you know two lifecycle methods and when they are called, but there is more.

The mounting of a component has two more lifecycle methods: componentWillMount and componentDidMount. The constructor is called first, componentWillMount gets called before the render method, and componentDidMount is called after the render method.

The mounting process has 4 lifecycle methods.

* constructor()
* componentWillMount()
* render()
* componentDidMount()

The componentDidMount method is usually used to get data from an API endpoint. But what about the update lifecycle of a component? Overall it has five lifecycle methods.

* componentWillReceiveProps()
* shouldComponentUpdate()
* componentWillUpdate()
* render()
* componentDidUpdate()

You don't need to know all of them from the beginning. But still it's good to know that each lifecycle method can be used for a specific use case. For instance shouldComponentUpdate() is mostly used in a mature React app to prevent a component from updating for performance optimizations.

So far you know that there is a mounting and updating lifecycle. But every lifecycle ends at some time. The third lifecycle is the unmounting which has only one lifecycle method called componentWillUnmount. It's used to cleanup when you are about to destroy your component.

So far you have only used the constructor and render methods. These are the commonly used lifecycle methods for ES6 class components. Every other lifecycle method is used for more advanced use cases.

### Exercises:

* read more about [lifecycle methods in React](https://facebook.github.io/react/docs/react-component.html)
* read more about [the state and lifecycle in React](https://facebook.github.io/react/docs/state-and-lifecycle.html)

## Fetch Data

Now you are prepared to fetch data from the Hacker News API. I mentioned one lifecycle method which can be used to fetch data.

Let's setup the path constants and default parameters to break the API request into smaller pieces.

{lang=javascript}
~~~~~~~~
import React, { Component } from 'react';
import './App.css';

# leanpub-start-insert
const DEFAULT_QUERY = 'redux';
# leanpub-end-insert

# leanpub-start-insert
const PATH_BASE = 'https://hn.algolia.com/api/v1';
const PATH_SEARCH = '/search';
const PARAM_SEARCH = 'query=';
# leanpub-end-insert

...
~~~~~~~~

By using [ES6 template strings](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals) you can concatenate the url.

{lang=javascript}
~~~~~~~~
`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${DEFAULT_QUERY}`

// https://hn.algolia.com/api/v1/search?query=redux
~~~~~~~~

That will keep your url composition flexible in the future.

But let's get to the API fetch where we use the url. The whole data fetch process will be presented at once, but each step will get explained afterwards.

{lang=javascript}
~~~~~~~~
...

class App extends Component {

  constructor(props) {
    super(props);

    this.state = {
# leanpub-start-insert
      result: null,
      query: DEFAULT_QUERY,
# leanpub-end-insert
    };

# leanpub-start-insert
    this.setSearchTopstories = this.setSearchTopstories.bind(this);
    this.fetchSearchTopstories = this.fetchSearchTopstories.bind(this);
# leanpub-end-insert
    this.onSearchChange = this.onSearchChange.bind(this);
  }

# leanpub-start-insert
  setSearchTopstories(result) {
    this.setState({ result });
  }
# leanpub-end-insert

# leanpub-start-insert
  fetchSearchTopstories(query) {
    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${query}`)
      .then(response => response.json())
      .then(result => this.setSearchTopstories(result));
  }
# leanpub-end-insert

# leanpub-start-insert
  componentDidMount() {
    const { query } = this.state;
    this.fetchSearchTopstories(query);
  }
# leanpub-end-insert

  ...
}
~~~~~~~~

A lot of things happened. First I thought to break it into smaller pieces. Then again it would be difficult to grasp the relations to each other of each piece. Let me explain the last step in detail.

First you can remove the hard coded list of items, because you return a result from the Hacker News API. Now the initial state of your component has a empty result and default query. The same default query is used in the search field and in your first request.

Second you use the `componentDidMount()` lifecycle method to fetch the data after the component mounted. In the very first fetch the default query from the component state is used.

Third the native fetch API is used. ES6 string template strings allow it to compose the path with the query. The response needs to get transformed and can finally be set in the internal component state. Be careful and don't forget to bind your new component methods.

Now you can use the fetched data instead of the hard coded list of items. But be careful. The result is not only a list of data. [It's a complex object with meta information and a list of hits.](https://hn.algolia.com/api) You can output the internal state with `console.log(this.state);` to visualize it.


{lang=javascript}
~~~~~~~~
class App extends Component {

  ...

  render() {
# leanpub-start-insert
    const { query, result } = this.state;
# leanpub-end-insert
    return (
      <div className="page">
        <div className="interactions">
          <Search
            value={query}
            onChange={this.onSearchChange}
          >
            Search
          </Search>
        </div>
# leanpub-start-insert
        { result ? <Table list={result.hits} pattern={query} /> : null }
# leanpub-end-insert
      </div>
    );
  }
}
~~~~~~~~

Have you noticed the conditional rendering? Before you fetch the data from the Hacker News API, the result in your internal component state is null. Thus you can't render the Table. After that you fetch the data to fill your table with items.

Let's recap what happens during the component lifecycle. Your component gets initialized by the constructor. After that it renders for the first time. Only after the the component is rendered after the initialization, the componentDidMount lifecycle method runs. In that method you fetch the data from the Hacker News API asynchronously. Once the data arrives, it changes your internal component state. After that the update lifecycle comes into play. The component runs the render method again, but this time with populated data in your internal component state. The Table gets rendered.

Let's get back to the conditional rendering. There is another approach when you return null for one of the blocks.

{lang=javascript}
~~~~~~~~
{ result && <Table list={result.hits} pattern={query} /> }
~~~~~~~~

In the end it's a personal preference. But after all you should be able to see the fetched data in your list.

### Exercises:

* read more about [ES6 template strings](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)
* read more about [React conditional rendering](https://facebook.github.io/react/docs/conditional-rendering.html)
* read more about [the native fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API)
* experiment with the [Hacker News API](https://hn.algolia.com/api)

## Client- or Server-side Interaction: Search

When you use the search now, you will filter the list. That's happening on the client-side though. Now you are going to use the Hacker News API to search on the server-side. Otherwise you would deal only with the first API response which you got on `componentDidMount()` with the default query parameter.

You can define an `onSubmit` function in your ES6 class component, which fetches results from the Hacker News API like in your `componentDidMount()` lifecycle method. But it fetches it with the modified query. Don't forget to bind the function.

{lang=javascript}
~~~~~~~~
class App extends Component {

  constructor(props) {
    super(props);

    this.state = {
      result: null,
      query: DEFAULT_QUERY,
    };

    this.setSearchTopstories = this.setSearchTopstories.bind(this);
    this.fetchSearchTopstories = this.fetchSearchTopstories.bind(this);
    this.onSearchChange = this.onSearchChange.bind(this);
# leanpub-start-insert
    this.onSearchSubmit = this.onSearchSubmit.bind(this);
# leanpub-end-insert
  }

# leanpub-start-insert
  onSearchSubmit() {
    const { query } = this.state;
    this.fetchSearchTopstories(query);
  }
# leanpub-end-insert

  ...
}
~~~~~~~~

The Search component gets extended by a button element. The button will explicit trigger the search. Otherwise you would hit the Hacker News API every time your input changes. As alternative you could debounce (delay) the `onChange` callback and spare the button, but it would add more complexity at this time. Let's keep it without debounce.

{lang=javascript}
~~~~~~~~
class App extends Component {

  ...

  render() {
    const { query, result } = this.state;
    return (
      <div className="page">
        <div className="interactions">
# leanpub-start-insert
          <Search
            value={query}
            onChange={this.onSearchChange}
            onSubmit={this.onSearchSubmit}
          >
# leanpub-end-insert
            Search
          </Search>
        </div>
        { result && <Table list={result.hits} pattern={query} /> }
      </div>
    );
  }
}

# leanpub-start-insert
const Search = ({ value, onChange, onSubmit, children }) =>
  <form onSubmit={onSubmit}>
    <input
      type="text"
      value={value}
      onChange={onChange}
    />
    <button type="submit">
      {children}
    </button>
  </form>
# leanpub-end-insert
~~~~~~~~

Additionally the Search component gets the `onSubmit` callback. The form uses the callback, but the button has to define itself as type of submit.

In the Table you can remove the filter functionality, because there will be no client-side filter anymore. The result comes directly from the API.

{lang=javascript}
~~~~~~~~
class App extends Component {

  ...

  render() {
    const { query, result } = this.state;
    return (
      <div className="page">
        <div className="interactions">
          <Search
            value={query}
            onChange={this.onSearchChange}
            onSubmit={this.onSearchSubmit}
          >
            Search
          </Search>
        </div>
# leanpub-start-insert
        { result && <Table list={result.hits} /> }
# leanpub-end-insert
      </div>
    );
  }
}

# leanpub-start-insert
const Table = ({ list }) =>
# leanpub-end-insert
  <div className="table">
# leanpub-start-insert
    { list.map((item) =>
# leanpub-end-insert
      ...
    )}
  </div>
~~~~~~~~

When you try to search now, you will experience that the browser reloads. That's a native browser behaviour on submit in a form. In React you will often come across the `preventDefault()` event function to suppress native browser behaviour.

{lang=javascript}
~~~~~~~~
# leanpub-start-insert
onSearchSubmit(event) {
# leanpub-end-insert
  const { query } = this.state;
  this.fetchSearchTopstories(query);
# leanpub-start-insert
  event.preventDefault();
# leanpub-end-insert
}
~~~~~~~~

Now you should be able to search different Hacker News stories. There should be no client-sided search anymore.

### Exercises:

* read more about [synthetic events in React](https://facebook.github.io/react/docs/events.html)

## Paginated Fetch

Did you have a closer look at the returned data structure yet? The [Hacker News API](https://hn.algolia.com/api) returns more than a list of hits. The page property, which is 0 in the first response, can be used to fetch more paginated data. You only need to pass the next page with the same query to the API.

Let's place a button below of the Table component to fetch more data. First you can define a very abstract and reusable Button component.

{lang=javascript}
~~~~~~~~
const Button = ({ onClick, children }) =>
  <button onClick={onClick} type="button">
    {children}
  </button>
~~~~~~~~

It might seem redundant to declare such a component. You have a `Button` instead of a `button` and only spare the `type="button"`. Except for the type attribute you have to define everything else when you want to use the Button component. But you have to think about the long term investment here. Imagine you have several buttons in your app, but want to change an attribute, style or behaviour for the button. Without the component you would have to refactor every button. Instead the Button component ensures to have one single source of truth. One Button to refactor all buttons at once.

Before you will use the Button, you have to declare more composable API constants to use the page parameter.

{lang=javascript}
~~~~~~~~
const DEFAULT_QUERY = 'redux';
# leanpub-start-insert
const DEFAULT_PAGE = 0;
# leanpub-end-insert

const PATH_BASE = 'https://hn.algolia.com/api/v1';
const PATH_SEARCH = '/search';
const PARAM_SEARCH = 'query=';
# leanpub-start-insert
const PARAM_PAGE = 'page=';
# leanpub-end-insert
~~~~~~~~

Now you can use these constants to add the page parameter to your API request.

{lang=javascript}
~~~~~~~~
`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${query}&${PARAM_PAGE}`

// https://hn.algolia.com/api/v1/search?query=redux&page=
~~~~~~~~

The method `fetchSearchTopstories` will take the page as second argument. The `componentDidMount` and `onSearchSubmit` methods take the `DEFAULT_PAGE` for the initial and changed query API calls. They should fetch the first page on the first load, and every additional fetch should fetch the next page.

{lang=javascript}
~~~~~~~~
class App extends Component {

  ...

  onSearchSubmit(event) {
    const { query } = this.state;
# leanpub-start-insert
    this.fetchSearchTopstories(query, DEFAULT_PAGE);
# leanpub-end-insert
    event.preventDefault();
  }

# leanpub-start-insert
  fetchSearchTopstories(query, page) {
    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${query}&${PARAM_PAGE}${page}`)
# leanpub-end-insert
      .then(response => response.json())
      .then(result => this.setSearchTopstories(result));
  }

  componentDidMount() {
    const { query } = this.state;
# leanpub-start-insert
    this.fetchSearchTopstories(query, DEFAULT_PAGE);
# leanpub-end-insert
  }

  ...

}
~~~~~~~~

Now you can use the current page from the API response and the `fetchSearchTopstories` method in your button. Let's use the Button to fetch more paginated data from the Hacker News API. You only need to define the `onClick` function which takes the current search query and the current page + 1. The result will be the next page.

{lang=javascript}
~~~~~~~~
class App extends Component {

  ...

  render() {
    const { query, result } = this.state;
# leanpub-start-insert
    const page = (result && result.page) || 0;
# leanpub-end-insert
    return (
      <div className="page">
        <div className="interactions">
          <Search
            value={query}
            onChange={this.onSearchChange}
            onSubmit={this.onSearchSubmit}
          >
            Search
          </Search>
        </div>
        { result && <Table list={result.hits} /> }
# leanpub-start-insert
        <div className="interactions">
          <Button onClick={() => this.fetchSearchTopstories(query, page + 1)}>
            More
          </Button>
        </div>
# leanpub-end-insert
      </div>
    );
  }
}
~~~~~~~~

Make sure to default to page 0 when there is no result.

There is one step missing. You fetch the next page of data, but it will overwrite the your old data. Instead of concatenating the old and new results, you replace it now. Let's adjust the functionality to add the new results rather than to overwrite it.

{lang=javascript}
~~~~~~~~
setSearchTopstories(result) {
# leanpub-start-insert
  const { hits, page } = result;
# leanpub-end-insert

# leanpub-start-insert
  const oldHits = page === 0 ? [] : this.state.result.hits;
  const updatedHits = [ ...oldHits, ...hits ];
# leanpub-end-insert

# leanpub-start-insert
  this.setState({ result: { hits: updatedHits, page } });
# leanpub-end-insert
}
~~~~~~~~

First you get the hits and page from the result.

Second you have to evaluate whether there are already old hits.

When the page is 0, it's a new search request from `componentDidMount` or `onSearchSubmit`. The hits are empty. But when you click the More button to fetch paginated data the page isn't 0. It's the next page. The old hits are already stored in your state and thus can be used.

Third once you have the old hits, which you don't want to overwrite, you can merge them with the hits from the recent API request. The merge of both lists might look foreign to you. It uses the [ES6 array spread operator](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator) to spread every value in both lists into a new list.

Last you set the merged hits and page in the internal component state. Make sure to understand what's happening here before you continue.

You can make one last adjustment. When you try the More button it only fetches few items. The API path can be extended to fetch more data with each request. Again you can add more composable path constants.

{lang=javascript}
~~~~~~~~
const DEFAULT_QUERY = 'redux';
const DEFAULT_PAGE = 0;
# leanpub-start-insert
const DEFAULT_HPP = '100';
# leanpub-end-insert

const PATH_BASE = 'https://hn.algolia.com/api/v1';
const PATH_SEARCH = '/search';
const PARAM_SEARCH = 'query=';
const PARAM_PAGE = 'page=';
# leanpub-start-insert
const PARAM_HPP = 'hitsPerPage=';
# leanpub-end-insert
~~~~~~~~

Now you can use the constants to extend the API path.

{lang=javascript}
~~~~~~~~
fetchSearchTopstories(query, page) {
# leanpub-start-insert
  fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${query}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)
# leanpub-end-insert
    .then(response => response.json())
    .then(result => this.setSearchTopstories(result));
}
~~~~~~~~

Afterwards the request to the Hacker News API fetches more data than before.

### Exercises:

* make sure to understand what you are doing in setSearchTopstories
* read more about the [ES6 array spread operator](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator)
* experiment with the [Hacker News API parameters](https://hn.algolia.com/api)

## Client Cache

Each search submit makes a request to the Hacker News API. You might search for "redux", followed by "react" and eventually "redux" again. In total it makes 3 requests. Since you already searched for "redux", you could spare the request and use a cached result from a previous request.

To implement that behaviour you have to store multiple `results` rather than one `result` in your internal component state. The results object will be a map with the search query as key and result as value. Each result from the API will be saved by search query key.

Currently your result in the component state looks similar to the following:

{lang=javascript}
~~~~~~~~
result: {
  hits: [ ... ],
  page: 2,
}
~~~~~~~~

Now you want to change it to:

{lang=javascript}
~~~~~~~~
results: {
  redux: {
    hits: [ ... ],
    page: 2,
  },
  react: {
    hits: [ ... ],
    page: 1,
  },
  ...
}
~~~~~~~~

Let's implement a client-side caching with React setState.

First rename the result object to results in the initial component state.

{lang=javascript}
~~~~~~~~
class App extends Component {

  constructor(props) {
    super(props);

    this.state = {
# leanpub-start-insert
      results: null,
# leanpub-end-insert
      query: DEFAULT_QUERY,
    };

    ...

  }

  ...

}
~~~~~~~~

Now you have to adjust the functionality where the result is stored to the internal component state. It should store multiple results.

{lang=javascript}
~~~~~~~~
class App extends Component {

  ...

  setSearchTopstories(result) {
    const { hits, page } = result;
# leanpub-start-insert
    const { query } = this.state;
# leanpub-end-insert

# leanpub-start-insert
    const oldHits = page === 0 ? [] : this.state.results[query].hits;
# leanpub-end-insert
    const updatedHits = [ ...oldHits, ...hits ];

    this.setState({
# leanpub-start-insert
      results: { ...this.state.results, [query]: { hits: updatedHits, page } }
# leanpub-end-insert
    });
  }

  ...

}
~~~~~~~~

In general the search query will be used as key to save the updated hits and page in a results map.

Therefore you have to retrieve the search query from the component state. The old hits have to get merged with the new hits as before. But this time the old hits get retrieved from the results map with the search query as key.

At the end a new result can be set in the results map in the internal component state. Let's examine the results object in setState.

{lang=javascript}
~~~~~~~~
results: { ...this.state.results, [query]: { hits: updatedHits, page } }
~~~~~~~~

The right hand side makes sure to store the updated result by search query in the results map. The value is an object with a hits and page property. The key is the search query. The `[query]` notation might be new to you. It uses an [ES6 dynamic key](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer) to allocate values in an object.

The left hand side needs to spread all other results by search key in the state. Otherwise you would lose all results you stored before. That's what enables the cache.

Before you have only used the ES6 array spread operator. This time it's an [object spread operator](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator). In ES6 the spread operator can be applied only to iterable objects like an array. The [object spread operator is a proposal](https://github.com/sebmarkbage/ecmascript-rest-spread) for a future ES version. But create-react-app incorporated the feature already, because it's widely used in the ecosystem.

Now you cache all results by search query.

In the next step you can retrieve the result depending on the search query from your map of results.

{lang=javascript}
~~~~~~~~
class App extends Component {

  ...

  render() {
# leanpub-start-insert
    const { query, results } = this.state;
    const page = (results && results[query] && results[query].page) || 0;
    const list = (results && results[query] && results[query].hits) || [];
# leanpub-end-insert
    return (
      <div className="page">
        <div className="interactions">
          <Search
            value={query}
            onChange={this.onSearchChange}
            onSubmit={this.onSearchSubmit}
          >
            Search
          </Search>
        </div>
# leanpub-start-insert
        <Table list={list} />
# leanpub-end-insert
        <div className="interactions">
          <Button onClick={() => this.fetchSearchTopstories(query, page + 1)}>
            More
          </Button>
        </div>
      </div>
    );
  }
}
~~~~~~~~

Since you default to an empty list when there is no result by search query, you can spare the conditional check for the Table component.

The search functionality should work again. It caches all results from the Hacker News API. But something feels wrong when you test it on your own. The search component works a bit unexpected. On submit, a server-side search request is made, as expected, but when you change the search query in the input field without hitting the submit button, the Table content changes  without hitting the submit button.

It makes more sense to trigger search explicitly on submit without a client-side search. The issue is that the result depends on the search query. But the search query changes every time you type something into the Search component. The query is a temporary property that changes all the time. On the other hand, you want to set a fixed search key once you hit the submit button to keep a fixed search result. Let's introduce a search key.

{lang=javascript}
~~~~~~~~
class App extends Component {

  constructor(props) {
    super(props);

    this.state = {
      results: null,
      query: DEFAULT_QUERY,
# leanpub-start-insert
      searchKey: '',
# leanpub-end-insert
    };

    ...
  }

  onSearchSubmit(event) {
    const { query } = this.state;
# leanpub-start-insert
    this.setState({ searchKey: query });
# leanpub-end-insert
    this.fetchSearchTopstories(query, DEFAULT_PAGE);
    event.preventDefault();
  }

  componentDidMount() {
    const { query } = this.state;
# leanpub-start-insert
    this.setState({ searchKey: query });
# leanpub-end-insert
    this.fetchSearchTopstories(query, DEFAULT_PAGE);
  }

  ...

}
~~~~~~~~

The search key will be the fixed search query. It gets assigned before you make the Hacker News API request.

Now instead of the query property, which is fluctuant, you will use the search key to get and set the result.

{lang=javascript}
~~~~~~~~
class App extends Component {

  ...

  setSearchTopstories(result) {
    const { hits, page } = result;
# leanpub-start-insert
    const { searchKey } = this.state;
# leanpub-end-insert

# leanpub-start-insert
    const oldHits = page === 0 ? [] : this.state.results[searchKey].hits;
# leanpub-end-insert
    const updatedHits = [ ...oldHits, ...hits ];

    this.setState({
# leanpub-start-insert
      results: { ...this.state.results, [searchKey]: { hits: updatedHits, page } }
# leanpub-end-insert
    });
  }

  ...

}
~~~~~~~~

In the render lifecycle method you will use the search key as well. But make sure to keep the query property for the input field in the Search component, which stays fluctuant.

{lang=javascript}
~~~~~~~~
class App extends Component {

  ...

  render() {
# leanpub-start-insert
    const { query, results, searchKey } = this.state;
    const page = (results && results[searchKey] && results[searchKey].page) || 0;
    const list = (results && results[searchKey] && results[searchKey].hits) || [];
# leanpub-end-insert
    return (
      <div className="page">
        <div className="interactions">
          <Search
            value={query}
            onChange={this.onSearchChange}
            onSubmit={this.onSearchSubmit}
          >
            Search
          </Search>
        </div>
        <Table list={list} />
        <div className="interactions">
# leanpub-start-insert
          <Button onClick={() => this.fetchSearchTopstories(searchKey, page + 1)}>
# leanpub-end-insert
            More
          </Button>
        </div>
      </div>
    );
  }
}
~~~~~~~~

Now try it again. The search should only happen once you click the submit button. Additionally each result will be cached.

However, nothing stops the app from sending an API request when you hit the submit button and there is already a cached result. What is a cached result when you don't use it? The last step would be to prevent the call when a result is available in the state.

{lang=javascript}
~~~~~~~~
class App extends Component {

  constructor(props) {

    ...

# leanpub-start-insert
    this.needsToSearchTopstories = this.needsToSearchTopstories.bind(this);
# leanpub-end-insert
  }

# leanpub-start-insert
  needsToSearchTopstories(query) {
    return !this.state.results[query];
  }
# leanpub-end-insert

  onSearchSubmit(event) {
    const { query } = this.state;
    this.setState({ searchKey: query });
# leanpub-start-insert
    if (this.needsToSearchTopstories(query)) {
# leanpub-end-insert
      this.fetchSearchTopstories(query, DEFAULT_PAGE);
# leanpub-start-insert
    }
# leanpub-end-insert
    event.preventDefault();
  }

  ...

}
~~~~~~~~

Now your client hits the API only once although you search for a query twice. Even paginated data with several pages gets cached that way, because you always save the page for each result in the results map.

### Exercises:

* read more about the [ES6 object spread operator](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator)
* read more about [ES6 computed property names](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer)

{pagebreak}

Your *src/App.js* should look like the following by now:

{lang=javascript}
~~~~~~~~
import React, { Component } from 'react';
import './App.css';

const DEFAULT_QUERY = 'redux';
const DEFAULT_PAGE = 0;
const DEFAULT_HPP = '100';

const PATH_BASE = 'https://hn.algolia.com/api/v1';
const PATH_SEARCH = '/search';
const PARAM_SEARCH = 'query=';
const PARAM_PAGE = 'page=';
const PARAM_HPP = 'hitsPerPage=';

class App extends Component {

  constructor(props) {
    super(props);

    this.state = {
      results: null,
      query: DEFAULT_QUERY,
      searchKey: '',
    };

    this.setSearchTopstories = this.setSearchTopstories.bind(this);
    this.fetchSearchTopstories = this.fetchSearchTopstories.bind(this);
    this.needsToSearchTopstories = this.needsToSearchTopstories.bind(this);
    this.onSearchChange = this.onSearchChange.bind(this);
    this.onSearchSubmit = this.onSearchSubmit.bind(this);
  }

  setSearchTopstories(result) {
    const { hits, page } = result;
    const { searchKey } = this.state;

    const oldHits = page === 0 ? [] : this.state.results[searchKey].hits;
    const updatedHits = [ ...oldHits, ...hits ];

    this.setState({
      results: { ...this.state.results, [searchKey]: { hits: updatedHits, page } }
    });
  }

  fetchSearchTopstories(query, page) {
    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${query}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)
      .then(response => response.json())
      .then(result => this.setSearchTopstories(result));
  }

  componentDidMount() {
    const { query } = this.state;
    this.setState({ searchKey: query });
    this.fetchSearchTopstories(query, DEFAULT_PAGE);
  }

  needsToSearchTopstories(query) {
    return !this.state.results[query];
  }

  onSearchChange(event) {
    this.setState({ query: event.target.value });
  }

  onSearchSubmit(event) {
    const { query } = this.state;
    this.setState({ searchKey: query });
    if (this.needsToSearchTopstories(query)) {
      this.fetchSearchTopstories(query, DEFAULT_PAGE);
    }
    event.preventDefault();
  }

  render() {
    const { query, results, searchKey } = this.state;
    const page = (results && results[searchKey] && results[searchKey].page) || 0;
    const list = (results && results[searchKey] && results[searchKey].hits) || [];
    return (
      <div className="page">
        <div className="interactions">
          <Search
            value={query}
            onChange={this.onSearchChange}
            onSubmit={this.onSearchSubmit}
          >
            Search
          </Search>
        </div>
        <Table list={list} />
        <div className="interactions">
          <Button onClick={() => this.fetchSearchTopstories(searchKey, page + 1)}>
            More
          </Button>
        </div>
      </div>
    );
  }
}

const Search = ({ value, onChange, onSubmit, children }) =>
  <form onSubmit={onSubmit}>
    <input
      type="text"
      value={value}
      onChange={onChange}
    />
    <button type="submit">
      {children}
    </button>
  </form>

const Table = ({ list }) =>
  <div className="table">
    { list.map((item) =>
      <div key={item.objectID} className="table-row">
        <span style={{ width: '40%' }}>
          <a href={item.url}>{item.title}</a>
        </span>
        <span style={{ width: '30%' }}>
          {item.author}
        </span>
        <span style={{ width: '15%' }}>
          {item.num_comments}
        </span>
        <span style={{ width: '15%' }}>
          {item.points}
        </span>
      </div>
    )}
  </div>

const Button = ({ onClick, children }) =>
  <button onClick={onClick} type="button">
    {children}
  </button>

export default App;
~~~~~~~~

You have learned to interact with an API in React! Let's recap the last chapters:

* React
  * ES6 class component lifecycle methods for different use cases
  * componentDidMount() for API interactions
  * conditional rendering approaches
  * synthetic events on forms
  * reusable components like a Button
* ES6
  * template strings
  * spread operator
  * computed property names
* General
  * Hacker News API interaction
  * native fetch browser API
  * client- and server-side search
  * pagination of data
  * client-side caching

Again it makes sense to take a break. Internalize the learnings and apply them on your own. You can experiment with the source code you have written so far.
